{
  "openapi": "3.0.0",
  "info": {
    "title": "API NgCash",
    "description": "Responsável por validar informações de usuários e pelo controle transações.",
    "contact": {
      "name": "André Marquez",
      "email": "andremarquezz@gmail.com",
      "url": "https://www.linkedin.com/in/andremarquezz/"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://localhost:3001",
      "description": "API"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Endpoint para login",
        "description": "Esta rota valida as informações < username > e < password > fornecidos com as informações contidas banco de dados",
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infoToLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLogged"
                }
              }
            }
          },
          "400": {
            "description": "Bad Resquest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Incorrect username"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Incorrect password"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Endpoint para registro de usuários",
        "description": "Este endpoint registra as informações fornecidas < username >, < password > no banco de dados",
        "tags": ["Users"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infoToRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userLogged"
                }
              }
            }
          },
          "400": {
            "description": "Error Bad Resquest",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorsToRegister"
                }
              }
            }
          }
        }
      }
    },
    "/account": {
      "get": {
        "summary": "Endpoint que retorna informações da conta do usuário",
        "description": "Este endpoint retorna o < id > e < balance > do usuário no banco de dados",
        "tags": ["Accounts"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userAccount"
                }
              }
            }
          },
          "401": {
            "description": "Error Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorsValidateToken"
                }
              }
            }
          }
        }
      }
    },
    "/transaction": {
      "post": {
        "summary": "Endpoint para criar uma transação usuário",
        "description": "Este endpoint cria uma transação debitando o valor do usuário e creditando o valor  na conta do usuario informado",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/infoToCreateTransaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transactions"
                }
              }
            }
          },
          "400": {
            "description": "Error Bad Resquest",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "'User does not exist'"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Balance insufficient"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "It is not possible to transfer to the same account"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error Internal Server",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Error when performing transaction"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Endpoint que retorna as transações do usuário",
        "description": "Este endpoint retorna informações de transações do usuário contidos no banco de dados",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transactions"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorsValidateToken"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/cashin": {
      "get": {
        "summary": "Endpoint que retorna as transações Cash In do usuário",
        "description": "Este endpoint retorna informações de transações onde o accountId do usuário seja o valor contido na chave creditedAccountId na tabela Transactions",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transactions"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorsValidateToken"
                }
              }
            }
          }
        }
      }
    },
    "/transaction/cashout": {
      "get": {
        "summary": "Endpoint que retorna as transações Cash out do usuário",
        "description": "Este endpoint retorna informações de transações onde o accountId do usuário seja o valor contido na chave debitedAccountId na tabela Transactions",
        "tags": ["Transactions"],
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transactions"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Error Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorsValidateToken"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "infoToLogin": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "Admin"
          },
          "password": {
            "type": "string",
            "example": "secret_admin"
          }
        }
      },
      "infoToRegister": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "André"
          },
          "password": {
            "type": "string",
            "example": "secret_jey"
          }
        }
      },
      "userLogged": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywiaWF0IjoxNjY4MDE4ODM2LCJleHAiOjE2Njg2MjM2MzZ9.5WgExKGWt9AIqHT_PGAaTixnSPVUMluAsa4FiQYGLVU"
          }
        }
      },
      "userAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "balance": {
            "type": "string",
            "example": "100.00"
          }
        }
      },
      "transactions": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "example": 1
          },
          "debitedAccountId": {
            "type": "number",
            "example": 2
          },
          "creditedAccountId": {
            "type": "number",
            "example": 1
          },
          "value": {
            "type": "number",
            "example": 80
          },
          "createdAt": {
            "type": "string",
            "example": "2022-11-17T17:34:35.823Z"
          }
        }
      },
      "infoToCreateTransaction": {
        "type": "object",
        "properties": {
          "userCashIn": {
            "type": "string",
            "example": "Jey"
          },
          "value": {
            "type": "number",
            "example": 80
          }
        }
      },
      "errorsToRegister": {
        "type": "object",
        "properties": {
          "error1": {
            "type": "string",
            "example": "username must be at least 3 characters"
          },
          "error2": {
            "type": "string",
            "example": "password must be at least 8 characters"
          },
          "error3": {
            "type": "string",
            "example": "username already exists"
          },
          "error4": {
            "type": "string",
            "example": "The password must have at least one uppercase, lowercase letter and number"
          }
        }
      },
      "errorsValidateToken": {
        "type": "object",
        "properties": {
          "error1": {
            "type": "string",
            "example": "token not found"
          },
          "error2": {
            "type": "string",
            "example": "User not found"
          },
          "error3": {
            "type": "string",
            "example": "Token must be a valid token"
          }
        }
      }
    }
  }
}
